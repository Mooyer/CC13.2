#region License

// Copyright (c) 2013, MatrixPACS Inc.
// All rights reserved.
// http://www.MatrixPACS.ca
//
// This file is part of the MatrixPACS RIS/PACS open source project.
//
// The MatrixPACS RIS/PACS open source project is free software: you can
// redistribute it and/or modify it under the terms of the GNU General Public
// License as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// The MatrixPACS RIS/PACS open source project is distributed in the hope that it
// will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
// Public License for more details.
//
// You should have received a copy of the GNU General Public License along with
// the MatrixPACS RIS/PACS open source project.  If not, see
// <http://www.gnu.org/licenses/>.

#endregion

// This file is auto-generated by the MatrixPACS.Model.SqlServer.CodeGenerator project.

namespace MatrixPACS.ImageServer.Model.EntityBrokers
{
    using System;
    using System.Xml;
    using MatrixPACS.Enterprise.Core;
    using MatrixPACS.ImageServer.Enterprise;

    public partial class CannedTextSelectCriteria : EntitySelectCriteria
    {
        public CannedTextSelectCriteria()
        : base("CannedText")
        {}
        public CannedTextSelectCriteria(CannedTextSelectCriteria other)
        : base(other)
        {}
        public override object Clone()
        {
            return new CannedTextSelectCriteria(this);
        }
        [EntityFieldDatabaseMappingAttribute(TableName="CannedText", ColumnName="Label")]
        public ISearchCondition<String> Label
        {
            get
            {
              if (!SubCriteria.ContainsKey("Label"))
              {
                 SubCriteria["Label"] = new SearchCondition<String>("Label");
              }
              return (ISearchCondition<String>)SubCriteria["Label"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="CannedText", ColumnName="Category")]
        public ISearchCondition<String> Category
        {
            get
            {
              if (!SubCriteria.ContainsKey("Category"))
              {
                 SubCriteria["Category"] = new SearchCondition<String>("Category");
              }
              return (ISearchCondition<String>)SubCriteria["Category"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="CannedText", ColumnName="Text")]
        public ISearchCondition<String> Text
        {
            get
            {
              if (!SubCriteria.ContainsKey("Text"))
              {
                 SubCriteria["Text"] = new SearchCondition<String>("Text");
              }
              return (ISearchCondition<String>)SubCriteria["Text"];
            } 
        }
    }
}
